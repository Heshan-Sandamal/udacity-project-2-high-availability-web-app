Description: CD12352 - Infrastructure as Code Project - Udagram

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  Owner:
    Description: Owner of the infrastructure
    Type: String

  MaxInstanceCount:
    Description: Max count of servers
    Type: String

  MinInstanceCount:
    Description: Min count of servers
    Type: String

  DesiredInstanceCount:
    Description: Desired count of servers
    Type: String

  AmiId:
    Description: Instance AMI Id
    Type: String
    Default: ami-0557a15b87f6559cf

  InstanceType:
    Description: Instance Type
    Type: String
    Default: t2.micro

  VolumeSize:
    Description: Size of the Volume
    Type: String
    Default: 10

  BucketName:
    Description: Bucket Name
    Type: String
    Default: us-east-1-udacity-project-2-bucket

  HomeIpAddress:
    Description: Bucket Name
    Type: String
    Default: 173.12.12.1

  KeyName:
    Description: Key Name
    Type: AWS::EC2::KeyPair::KeyName
    Default: my-udacity-keypair

Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to hosts from the LB Security Group
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LBSecGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionHostSecGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  BastionHostSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh access to bastion host
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${EnvironmentName}-web-servers"
      LaunchTemplateData:
        KeyName: !Ref KeyName
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install nginx -y
            sudo service nginx start
        ImageId: !Ref AmiId
        SecurityGroupIds:
          - !Ref WebServerSecGroup
        InstanceType: !Ref InstanceType
        BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: !Ref VolumeSize
        IamInstanceProfile:
          Name: !Ref WebAppInstanceProfile

  BastionHostRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${EnvironmentName}-bastian-server-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'


  BastionHostProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - !Ref BastionHostRole

  WebAppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${EnvironmentName}-web-server-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*Object'
                Resource:
                  - !Sub "arn:aws:s3:::${BucketName}/*"

  WebAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - !Ref WebAppInstanceRole

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref BastionHostSecGroup
      InstanceType: !Ref InstanceType
      ImageId: !Ref AmiId
      SubnetId:
        Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: !Ref VolumeSize
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion-Host
        - Key: Owner
          Value: !Ref Owner

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinInstanceCount
      DesiredCapacity: !Ref DesiredInstanceCount
      MaxSize: !Ref MaxInstanceCount
      TargetGroupARNs:
        - Ref: WebAppTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Autoscaling-Group
          PropagateAtLaunch: true
        - Key: Owner
          Value: !Ref Owner
          PropagateAtLaunch: true

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Target-Group
        - Key: Owner
          Value: !Ref Owner

  WebApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
        - Ref: LBSecGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Load-Balancer
        - Key: Owner
          Value: !Ref Owner

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [ / ]
      ListenerArn: !Ref 'Listener'
      Priority: 1

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Status: "Enabled"
            NoncurrentVersionExpirationInDays: 5
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-S3-Bucket
        - Key: Owner
          Value: !Ref Owner

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub ${S3Bucket.Arn}/*
            Principal: "*"

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: "origin access control(OAC) for allowing cloudfront to access S3 bucket"
        Name: cloud-front-OAC
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - S3Bucket
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: s3OriginId
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          TargetOriginId: s3OriginId
          ViewerProtocolPolicy: allow-all
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: none
        PriceClass: PriceClass_200
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-cloud-front
        - Key: Owner
          Value: !Ref Owner

Outputs:
  LoadBalancer:
    Description: Load Balancer URL
    Value:
      Fn::Join: [ "", [ "http://", !GetAtt WebApplicationLoadBalancer.DNSName ] ]
    Export:
      Name: !Sub ${EnvironmentName}-Application-LoadBalancer-Public-Url

  CloudFront:
    Description: Cloud Front Distribution URL
    Value:
      Fn::Join: [ "", [ "https://", !GetAtt CloudfrontDistribution.DomainName ] ]
    Export:
      Name: !Sub ${EnvironmentName}-CloudFront-Domain-Name

  BastionHost:
    Description: Bastion Host
    Value: !GetAtt BastionHost.PublicIp
    Export:
      Name: !Sub ${EnvironmentName}-Bastion-Host-Public-Ip